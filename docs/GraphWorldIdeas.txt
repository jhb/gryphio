chrGraphworld Ideen
================

Schema
------

Zwei Arten von Schemaverarbeitung:
- Duck Typing, d.h. es wird anhand von Properties erkannt, welche Schemata zutreffen
- Zuweisen: es können Schemata zugeordnet werden, entsprechende Properties werden gesetzt, und evtl. mit Default-Werten versehen

Beide Ansätze werden in Spezialproperties auf der Instanz gecached und indiziert.

Die Schema werden aus Knoten und Kanten definiert, siehe Vorarbeiten mit Christoph.

Editor
------

Der Editor muss mit den Schemata umgehen können. 

Rechte
------

Letztlich müssen die Rechte auf der Instanz gecached werden, d.h. welche Gruppen können gerade auf die Instanz zugreifen. Siehe Zope. ACL.

Wie aber kommt man zu den Rechten, die gecached werden?

- Zunächst darf auf nichts zugegriffen werden
- Direkte Verrechtung auf der Instanz
- Verrechtung anhand von Properties
- Verrechtung anhand der Einordnung in einer Hierarchie/DAG. Können mehrere Hierarchien bestehen?
- Evtl. Verrechtung entland von geraden Pfaden (DAG). Evtl. länger als 1. Beispiel Instanz eines Metaknotens, Metaknoten ist verrechtet.
- Komplexe Regeln, wobei man hier schnell das Land von OWL betritt, und nicht klar ist, ob man beim Schreiben oder Lesen anwendet, zumal dann jede neue Kante (aus dem abgefragten set) alle Knoten betreffen kann. Einschränkung auf DAG, Kantentypen. Setzt evtl. ein Event-Subscriber System voraus.

Die Rechteregel müsste folgendes erfüllen:
- für eine Instanz herausfinden, welche Gruppen zugreifen dürfen (Blick nach oben)
- für eine Instanz herausfinden, welche Objekte indirekt betroffen sind (Blick nach unten). Siehe Zope/Plone.

Voraussetzung ist eine ACL Verwaltung, d.h.

- User
- Gruppen
- Gruppen in Gruppen(?)
- Rechte
- Zuordnungen: Rechte-Gruppen, Gruppen-User

Siehe Zope.

Überlegung, eine GUI mit Mengenlehre zu bauen. D.h. man kann mit Regeln Mengen definieren, und dann den Kombination von Mengen Rechte zuweisen.

Historie
--------

Schön wäre ein/mehrere Plugins zur Historisierung von Instanzen
 

Allgemein
---------

Das ganze braucht eine Backend-Gui. Ein Vergleich zum ZMI drängt sich auf. Dies würde vor allem _eine_ Hierarchie bedeuten. Dies ist viel einfacher zu managen und zu verstehen. Vorüberlegungen mit Tom? Mengen-Gui für Rechte? 